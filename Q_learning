#################################################################################
import numpy as np

class Space:
    def __init__(self, name, start = False, goal = False, forbidden = False,
                 wall = False, agent = False, wall_L = False, wall_R = False,
                 wall_U = False, wall_D = False):
        
        self.name = name

        self.left = None
        self.right = None
        self.up = None
        self.down = None
        
        self.start = start
        self.goal = goal
        self.forbidden = forbidden
        self.wall = wall
        self.agent = False

        self.Q = {'Up':None, 'Down':None, 'Left': None, 'Right':None}
        self.N = {'Up':None, 'Down':None, 'Left': None, 'Right':None}

        self.wall_L = wall_L
        self.wall_R = wall_R
        self.wall_U = wall_U
        self.wall_D = wall_D



def make_board(user_input):
    
    board = {i:Space(i) for i in range(1,17)}
    board[0] = Space(0)

    #Set up border

    board[1].left = board[1].down = board[2].down = board[3].down = board[4].down = \
            board[4].right = board[5].left = board[8].right = board[9].left = \
            board[12].right = board[13].left = board[13].up = board[14].up = \
            board[15].up = board[16].up = board[16].right = None

    #Set up connections

    def set_neighbors(board, state, num_list):

        board[state].left = board[num_list[0]]
        board[state].up = board[num_list[1]]
        board[state].right = board[num_list[2]]
        board[state].down = board[num_list[3]]

    set_neighbors(board, 1, [0,5,2,0])
    set_neighbors(board, 2, [1,6,3,0])
    set_neighbors(board, 3, [2,7,4,0])
    set_neighbors(board, 4, [3,8,0,0])
    set_neighbors(board, 5, [0,9,6,1])
    set_neighbors(board, 6,  [5,10,7,2])
    set_neighbors(board, 7,  [6,11,8,3])
    set_neighbors(board, 8,  [7,12,0,4])
    set_neighbors(board, 9,  [0,13,10,5])
    set_neighbors(board, 10,  [9,14,11,6])
    set_neighbors(board, 11,  [10,15,12,7])
    set_neighbors(board, 12,  [11,16,0,8])
    set_neighbors(board, 13,  [0,0,14,9])
    set_neighbors(board, 14,  [3,0,15,10])
    set_neighbors(board, 15,  [14,0,16,11])
    set_neighbors(board, 16,  [15,0,0,12])


    board[user_input[0]].goal = True
    board[user_input[1]].goal = True
    board[user_input[2]].forbidden = True
    board[user_input[3]].wall = True


    return board

def get_actions(board, current_state):

    if board[current_state].goal == True:
        return 'end'

    actions = []
    
    if (board[current_state].left.name != 0) and (board[current_state].left.wall == False):
        actions.append('left')
    if (board[current_state].right.name != 0) and (board[current_state].right.wall == False):
        actions.append('right')
    if (board[current_state].up.name != 0) and (board[current_state].up.wall == False):
        actions.append('up')
    if (board[current_state].down.name != 0) and (board[current_state].down.wall == False):
        actions.append('down')

    return actions

def end_position_reward(end_position, user_input):
    if (end_position == user_input[0]) or (end_position == user_input[1]):
        return 100
    if end_position == user_input[2]:
        return -100

def display_results(user_input, Q):
    
    if user_input[4] == 'p':
        print_optimal_policy(Q, user_input)
        
    if user_input[4] == 'q':
        print_Q_values(Q, user_input[5])


def print_optimal_policy(Q, user_input):
    for i in range(1,17):

        if i == user_input[0]:
            print(i, 'goal')
        elif i == user_input[1]:
            print(i, 'goal')
        elif i == user_input[2]:
            print(i, 'forbidden')
        elif i == user_input[3]:
            print(i, 'wall-square')
        else:
            print(i, number_to_direction(np.argmax(Q[i-1])))
    

def print_Q_values(Q, position):
     
    print('up', np.around(Q[position][1],2))
    print('right', np.around(Q[position][2], 2))
    print('down', np.around(Q[position][3], 2))
    print('left', np.around(Q[position][0], 2))
    

def convert_input_to_proper_form(user_input):
    
    u = user_input.split(' ')
    
    if len(u) != 6:
        u1 = [int(x) for x in u[:4]]
        u2 = [str(u[4])]
        return u1 + u2
    else:
        u1 = [int(x) for x in u[:4]]
        u2 = [str(u[4])]
        u3 = [int(u[5])]
        return u1 + u2 + u3

def move_position(board, Q, previous_position):
    
    epsilon = 0.1
    act_randomly = np.random.uniform(0,1) < epsilon

    direction = None
    
    if act_randomly == False:
        #0123-LURD
        direction = number_to_direction(np.argmax(Q[previous_position-1]))
    else:
        direction = number_to_direction(np.random.randint(4))

    available_actions = get_actions(board, previous_position)
    
    if direction in available_actions:
        
        if direction == 'left':
            return board[previous_position].left.name, 'left'
        if direction == 'right':
            return board[previous_position].right.name, 'right'
        if direction == 'up':
            return board[previous_position].up.name, 'up'
        if direction == 'down':
            return board[previous_position].down.name, 'down'
        
    else:
        return previous_position, direction

                            
def direction_to_number(d):
    if d == 'left':
        return 0
    if d == 'up':
        return 1
    if d == 'right':
        return 2
    if d == 'down':
        return 3
    if d == 'end':
        return 4

    
def number_to_direction(n):    
    #Convert a number to a direction
    if n == 0:
        return 'left'
    if n == 1:
        return 'up'
    if n == 2:
        return 'right'
    if n == 3:
        return 'down'
    if n == 4:
        return 'end'
    

def update_Q(board, Q, reward, previous_position, previous_action, next_position):
    #R is reward, s is previous_position,
    #a is previous_action, s1 is next_position
    alpha = 0.1
    gamma = 0.2

    available_actions = get_actions(board, next_position)
    available_actions = [direction_to_number(x) for x in available_actions]
    max_action_Q = np.max([Q[next_position-1, action] for action in available_actions])
    
    Q[previous_position-1, previous_action] = \
            (1-alpha)*Q[previous_position-1,previous_action] + \
            alpha*(reward + gamma * max_action_Q)

def run_main_program(board, Q, user_input):

       

    for j in range(10000):


        previous_position  = np.random.choice(list(set(np.arange(1,16)) \
                                                   - set(user_input)))

        previous_action = None

        end_positions = [user_input[0], user_input[1], user_input[2]]
        
        end_condition = False
        
        while end_condition == False:
            for end_position in end_positions:
                if previous_position == end_position:
                    reward = end_position_reward(end_position, user_input)
                    update_Q(board, Q, reward, previous_position,
                             previous_action, end_position)
                    end_condition = True

            next_position, next_action = move_position(board, Q,
                                                       previous_position)
            next_action = direction_to_number(next_action)
            reward = -0.1
            update_Q(board, Q, reward, previous_position,
                     next_action, next_position)

            previous_position = next_position
            previous_action = next_action

def main():
    
    #user_input = input()
    user_input = '15 12 8 6 p 1'
    user_input = convert_input_to_proper_form(user_input)
    board = make_board(user_input)
    Q = np.zeros((16, 4)) 
    run_main_program(board, Q, user_input)
    display_results(user_input, Q)

main()
