def main_program(string_input):
    import random

    initial_state = string_input[:-2]
    algorithm_char = string_input[-1]
    goal_state = '1w2w3w4w'
    
    result = run_algorithm(initial_state, goal_state, algorithm_char)
    
    return result


            
def run_algorithm(initial_state,goal_state,  algorithm_char):
    if algorithm_char == 'a':
        result = run_a_star_algorithm(initial_state, goal_state)
    if algorithm_char == 'b':
        result = run_BFS_algorithm(initial_state, goal_state)
    return result

def run_a_star_algorithm(string, desired_string):
    return None



def flip_string(string, flip_position):
    
    def switch_type(p_type_string):
        new_string = []
        for i in range(len(p_type_string)):
            if p_type_string[i] == 'b':
                new_string.append('w')
            if p_type_string[i] == 'w':
                new_string.append('b')
        new_string = ''.join(new_string)
        return new_string
  

    indices = ''.join((string[i] for i in range(0,8,2)))
    p_types = ''.join((string[i] for i in range(1,9,2)))

    
    indices_flipped = ''.join((indices[:flip_position][::-1],
                               indices[flip_position:]))
    p_types_flipped = ''.join((switch_type(p_types[:flip_position][::-1]),
                               p_types[flip_position:]))

    new_string = []
    for i in range(len(indices_flipped)):
        new_string.append(indices_flipped[i])
        new_string.append(p_types_flipped[i])

    new_string = ''.join(new_string)

    return new_string
    

class LinkedQueue:
    
    class _Node:
        
        __slots__ = '_element', '_next'
        
        def __init__(self, _element, _next):
            self._element = _element
            self._next = _next

    def __init__(self):
        self._head = None
        self._tail = None
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return self._size == 0

    def first(self):
        if self.is_empty():
            return Exception('Queue is empty.')
        return self._head._element

    def dequeue(self):
        if self.is_empty():
            return Exception('Queue is empty.')
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        if self.is_empty():
            self._tail = None
        return answer

    def enqueue(self, e):
        newest = self._Node(e, None)
        if self.is_empty():
            self._head = newest
        else:
            self._tail._next = newest
        self._tail = newest
        self._size += 1

class Node:
    def __init__(self, state, parent, action, path_cost):
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost

##q = LinkedQueue()
##q.enqueue(Node(0, None, None, None))

def expand(node):
    state = node.state
    flip_positions = random.sample(range(1,5), 4)
    flips = [Node(flip_string(state, flip_position), parent = node,
                  action = None, path_cost = None)  for \
             flip_position in flip_positions]
    return flips

def run_BFS_algorithm(initial_state, goal_state):
       
    initial_node = Node(state = initial_state, parent = None,
                        action = None, path_cost = None)
   
    if initial_node.state == goal_state:
        return initial_node
    frontier = LinkedQueue()
    frontier.enqueue(initial_node)
    reached = set(initial_node.state)
    while not frontier.is_empty():
        node = frontier.dequeue()
        for child_node in expand(node):
            child_state = child_node.state
            print(child_state)
            if child_state == goal_state:
                return child_node
            if child_state not in reached:
                reached.add(child_state)
                frontier.enqueue(child_node)
    return reached


string_input = '4b3b2b1b-b'
print(string_input)
reached = main_program(string_input)
    
