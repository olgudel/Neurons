################################################################################
#
#                           Import Libraries
#
################################################################################

import numpy as np
import cv2
import matplotlib.pyplot as plt

################################################################################
#
#                           Functions
#
################################################################################



def click_function(the_image):
    #This function selectes a set of points after clicking them.
    #To work properly, you must select points in the following order:
    #Upper left, upper right, lower left, and lower right.

    coords = []

    # function to display the coordinates of 
    # of the points clicked on the image  
    def click_event(event, x, y, flags, params): 
      
        # checking for left mouse clicks 
        if event == cv2.EVENT_LBUTTONDOWN: 
      
            # displaying the coordinates 
            # on the Shell 
            coords.append([x,y])
      
            # displaying the coordinates 
            # on the image window 
            font = cv2.FONT_HERSHEY_SIMPLEX 
            cv2.putText(the_image, str(x) + ',' +
                        str(y), (x,y), font, 
                        1, (255, 0, 0), 2) 
            cv2.imshow('image', the_image) 
      
    # displaying the image 
    cv2.imshow('image', the_image) 
      
    # setting mouse hadler for the image 
    # and calling the click_event() function 
    cv2.setMouseCallback('image', click_event) 
      
    # wait for a key to be pressed to exit 
    cv2.waitKey(0) 
      
    # close the window 
    cv2.destroyAllWindows()

    return coords

def make_per_matrices(pts, pts2):
    #Get the matrix that will be inverted to calculate perspective matrix.
    per_matrix = []
    for x,y,u,v in np.hstack([pts, pts2]):
        r1 = [x,y,1,0,0,0,-x*u, -y*u]
        r2 = [0,0,0,x,y,1,-x*v, -y*v]
        per_matrix.append(r1)
        per_matrix.append(r2)

    per_matrix = np.array(per_matrix).astype(np.float32)

    points_vector = []
    for x,y in pts2:
        points_vector.append(x)
        points_vector.append(y)

    points_vector = np.array(points_vector).astype(np.float32)
    points_vector = points_vector.reshape((len(points_vector),1))
    
        
    return per_matrix, points_vector


def make_aff_matrices(pts, pts2):
    #Get the matrix that will be inverted to calculate affine matrix.
    aff_matrix = []
    for x,y in pts:
        r1 = [x,y,0,0,1,0]
        r2 = [0,0,x,y,0,1]
        aff_matrix.append(r1)
        aff_matrix.append(r2)

    aff_matrix = np.array(aff_matrix).astype(np.float32)

    points_vector = []
    for x,y in pts2:
        points_vector.append(x)
        points_vector.append(y)

    points_vector = np.array(points_vector).astype(np.float32)
    points_vector = points_vector.reshape((len(points_vector),1))
    
    return aff_matrix, points_vector

def pseudo_inv(A,b):
    return ((np.linalg.inv(A.T@A))@A.T)@b

def reshape_per_matrix(per_matrix):
    x = list((per_matrix.reshape(-1,)).copy())
    x.append(1)
    x = np.array(x).reshape((3,3))
    return x

################################################################################
#
#                           Main Code
#
################################################################################

I = cv2.imread(r'C:\Users\Oliver\Desktop\Homework\2020\2 - Fall 2020\CISC 642 - Computer Vision\ud.jpg', 1)
I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)

I = cv2.resize(I, (512,512))


plt.imshow(I)
plt.show()


H = np.array([[1, 1, 1], [1,1,1], [1,1,1]]) * (1/9)


def convolve(img, H):
    image = img.copy()

    channels = []
    ch_names = ['R', 'G', 'B']
    for ch in range(image.shape[2]):
        print('Convolving chanel {}'.format(ch_names[ch]))
        I = image[:, :, ch]
        K_size = H.shape[0]
        frame_addition = int((K_size-1) // 2)
        frame = np.zeros([I.shape[0] + K_size - 1,
                          I.shape[1] + K_size - 1])
        
        frame[frame_addition: frame_addition + I.shape[0],
              frame_addition : frame_addition + I.shape[1]] = I
        final = frame.copy()

        for i in range(I.shape[0]):
            for j in range(I.shape[1]):
                final[i+frame_addition,j+frame_addition] = \
                                np.sum(H * frame[i:i+K_size, j:j+K_size])
        channels.append(final)

        return_image = np.stack(channels, axis = 2)
        return_image = return_image[frame_addition:-frame_addition, frame_addition:-frame_addition]

    return return_image

##result = convolve(I,H)
##
##plt.imshow(result.astype(np.uint8))
##plt.show()

def gaussian(sigma, F_size):
    numbers = range(-int((F_size - 1)//2), int((F_size - 1)//2 + 1))
    gauss = lambda x,y,sigma : 1/(2 * np.pi * sigma**2) * np.exp(-(x**2 + y**2)/(2 * sigma**2))

    gauss_kernel = np.zeros((F_size, F_size))
    for i in range(len(numbers)):
        for j in range(len(numbers)):
            gauss_kernel[i,j] = gauss(numbers[i],numbers[j],sigma)
    return gauss_kernel


def reduce(img, sigma, F_size):
    convolved_img = convolve(img, gaussian(sigma, F_size))
    reduced_img = convolved_img[::2, ::2]
    return reduced_img

##reduced_img = reduce(I, sigma = 1, F_size = 5)
##
##plt.imshow(reduced_img)
##plt.show()


def expand(img):
    expanded_img = np.zeros((2*img.shape[0],2*img.shape[1], 3))
    expanded_img[::2, ::2] = img

    return 4 * convolve(expanded_img, gaussian(1,5))


def GaussianPyramid(I,n):

    reduced_image = I.copy()
    GP = [reduced_image]

    for i in range(1,n+1):
        print('Reducing {}'.format(i))
        reduced_image = reduce(reduced_image, sigma = 1, F_size = 5)
        GP.append(reduced_image)

    return GP

#GP = GaussianPyramid(I,2)

def LaplacianPyramid(I,n):

    GP = GaussianPyramid(I,n)

    Gauss_dict = {i:GP[i] for i in range(len(GP))}

    Laplace_dict = {}
    Laplace_dict[n] = Gauss_dict[n]

    for i in np.arange(n):
        Laplace_dict[i] = Gauss_dict[i] - expand(Gauss_dict[i+1])

    return Laplace_dict

##LP = LaplacianPyramid(I, 2)
##plt.imshow(LP[0])
##plt.show()

def Reconstruct(LP,n):

    final_image = LP[n]

    for i in np.arange(n-1, -1, -1):
        print('Level {}'.format(i))
        final_image = expand(final_image) + LP[i]
##        final_image = convolve(final_image, H) + LP[i]
        

    return final_image

n = 3
reconstructed = Reconstruct(LaplacianPyramid(I, n), n)

plt.imshow(reconstructed.astype(np.uint8))
plt.show()

error = np.sum(np.abs(reconstructed - I))


I1 = cv2.imread(r'C:\Users\Oliver\Desktop\Homework\2020\2 - Fall 2020\CISC 642 - Computer Vision\apple.jpg', 1)
I1 = cv2.cvtColor(I1, cv2.COLOR_BGR2RGB)

I2 = cv2.imread(r'C:\Users\Oliver\Desktop\Homework\2020\2 - Fall 2020\CISC 642 - Computer Vision\orange.jpg', 1)
I2 = cv2.cvtColor(I2, cv2.COLOR_BGR2RGB)

I1 = cv2.resize(I1, (512,512))
I2 = cv2.resize(I2, (512,512))

n=3


#Choose one point on the image
coords = click_function(I1.copy())

binary_mask = np.zeros(I1.shape)
binary_mask[:, :coords[0][0]] = 1

mask = binary_mask.copy()


##plt.imshow(mask)
##plt.show()

L1 = LaplacianPyramid(I1, n)
L2= LaplacianPyramid(I2, n)



G3 = GaussianPyramid(mask, n)

L3 = {i : (L1[i]*G3[i] + (1 - G3[i])*L2[i]) for i in range(n+1)}


recon = Reconstruct(L3, n)
plt.imshow(recon.astype(np.uint8))
plt.show()

####################################
I_left = cv2.imread(r'C:\Users\Oliver\Desktop\Homework\2020\2 - Fall 2020\CISC 642 - Computer Vision\left.jpg', 1)
I_right = cv2.imread(r'C:\Users\Oliver\Desktop\Homework\2020\2 - Fall 2020\CISC 642 - Computer Vision\right.jpg', 1)

I_left = cv2.cvtColor(I_left, cv2.COLOR_BGR2RGB)
I_right = cv2.cvtColor(I_right, cv2.COLOR_BGR2RGB)

I_left = cv2.resize(I_left, (512,512))
I_right = cv2.resize(I_right, (512,512))

plt.imshow(I_left)
plt.show()

plt.imshow(I_right)
plt.show()

cut_location = 150

mosaic = np.zeros((I_left.shape[0], 2 * I_left.shape[1] - cut_location, 3)).astype(np.uint8)
mosaic_left = mosaic.copy()
mosaic_left[:I_left.shape[0], :I_left.shape[1]] = I_left
mosaic_right = mosaic.copy()
mosaic_right[-I_right.shape[0]:, -I_right.shape[1]:] = I_right

L_left = Laplacian(I_left, n)
L_right = Laplacian(I_right, n)


def moseaic(I1, I2, x, n):

    final_1 = np.zeros((I1.shape[0], I1.shape[1] + I2.shape[1] - x, 3))
    final_2 = np.zeros((I1.shape[0], I1.shape[1] + I2.shape[1] - x, 3))

    final_1[:, :I1.shape[1]] = I1
    final_2[:, -I2.shape[1]:] = I2

    mask = np.zeros((I1.shape[0], I1.shape[1] + I2.shape[1] - x, 3))
    mask[:, :I1.shape[1] - x] = 1
    mask[:, I1.shape[1]-x: I1.shape[1]] = 0.5
    mask[:, I1.shape[1]:] = 0

    G3 = GaussianPyramid(mask, n)

    L1 = LaplacianPyramid(final_1, n)
    L2 = LaplacianPyramid(final_2, n)


    L3 = {i : (L1[i]*G3[i] + (1 - G3[i])*L2[i]) for i in range(n+1)}


    recon = Reconstruct(L3, n)

        
    return recon

recon = moseaic(I_left, I_right, 320, 2)
plt.imshow(recon.astype(np.uint8))
plt.show()


#PERSPECTIVE TRANSFORMATION
#--------------------------
#Click four points to choose the coordinates to warp and press enter.
#Click another set of four points to choose the window size that contains the previous four points and press enter.
#A third window will appear which contains the warped image.  Click the four points that you chose previously in the warped image.

I_left_2 = I_left.copy()
I_right_2 = I_right.copy()

coords = click_function(I_left_2)
coords2 = click_function(I_right_2)

size_x, size_y = I_right_2.shape[0], I_right_2.shape[1]

pts1 = np.array(coords).astype(np.float32)
pts2 = np.array(coords2).astype(np.float32)

M_per = cv2.getPerspectiveTransform(pts1,pts2)

dst_per = cv2.warpPerspective(I_right, M_per, (size_x, size_y))

recon_per = moseaic(I_left, dst_per, 320, 2)
plt.imshow(recon_per.astype(np.uint8))
plt.show()



##matching_1 = pts1
##matching_2 = click_function(dst_per)
##matching_2 = np.array(matching_2).astype(np.float32)
##
##A,b = make_per_matrices(matching_1, matching_2)
##
##per_matrix = np.linalg.inv(A)@b
##
##plt.suptitle('Perspective'.format(coords))
##plt.subplot(121),plt.imshow(img),plt.title('Input')
##plt.subplot(122),plt.imshow(dst_per),plt.title('Output')
##plt.show()

