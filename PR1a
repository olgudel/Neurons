import numpy as np
import cv2
import matplotlib.pyplot as plt

from scipy.ndimage import gaussian_filter

I = cv2.imread(r'C:\Users\Oliver\Desktop\Homework\2020\2 - Fall 2020\CISC 642 - Computer Vision\ud.jpg', 1)
I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)
plt.imshow(I)
plt.show()


H = np.array([[1, 1, 1], [1,1,1], [1,1,1]]) * (1/9)


def convolve(img,H):
    image = img.copy()

    channels = []
    ch_names = ['R', 'G', 'B']
    for ch in range(image.shape[2]):
        print('Convolving chanel {}'.format(ch_names[ch]))
        I = image[:, :, ch]
        K_size = H.shape[0]
        frame_addition = int((K_size-1) // 2)
        frame = np.zeros([I.shape[0] + K_size - 1,
                          I.shape[1] + K_size - 1]).astype(np.uint8)
        
        frame[frame_addition: frame_addition + I.shape[0],
              frame_addition : frame_addition + I.shape[1]] = I
        final = frame.copy()

        for i in range(I.shape[0]):
            for j in range(I.shape[1]):
                final[i+frame_addition,j+frame_addition] = \
                                np.sum(H * frame[i:i+K_size, j:j+K_size])
        channels.append(final)
    return np.stack(channels, axis = 2)

result = convolve(I,H)

plt.imshow(result)
plt.show()

def gaussian(sigma, F_size):
    numbers = range(-int((F_size - 1)//2), int((F_size - 1)//2 + 1))
    gauss = lambda x,y,sigma : 1/(2 * np.pi * sigma**2) * np.exp(-(x**2 + y**2)/(2 * sigma**2))

    gauss_kernel = np.zeros((F_size, F_size))
    for i in range(len(numbers)):
        for j in range(len(numbers)):
            gauss_kernel[i,j] = gauss(numbers[i],numbers[j],sigma)
    return gauss_kernel


def reduce(img, sigma, F_size):
    convolved_img = convolve(img, gaussian(sigma, F_size))
    reduced_img = convolved_img[::2, ::2]
    return reduced_img

reduced_img = reduce(I, sigma = 4, F_size = 15)

plt.imshow(reduced_img)
plt.show()


def expand(img):
    expanded_img = np.zeros((2*img.shape[0],2*img.shape[1], 3)).astype(np.uint8)
    expanded_img[::2, ::2] = img

    channels = []
    ch_names = ['R', 'G', 'B']
    
    for ch in range(expanded_img.shape[2]):
        print('Filling channel {}'.format(ch_names[ch]))
        I = expanded_img[:, :, ch]

        for i in np.arange(1, I.shape[1] - 1, 2):
            I[:, i] = np.mean(np.vstack([I[:, i-1],
                                             I[:, i+1]]), axis = 0)
            
        for i in np.arange(1, I.shape[0] - 1, 2):
            I[i, :] = np.mean(np.vstack([I[i-1, :],
                                             I[i+1, :]]), axis = 0) 

            
        
##        for i in range(int((I.shape[1])//2) - 2):
##            I[:, 2*i+1] = np.mean(np.hstack([I[:, 2*i], I[:, 2*i + 2]]), axis = 1) 
##        for i in range(int((I.shape[0])//2) - 2):
##            I[2*i+1, :] = np.mean(np.vstack([I[2*i, :], I[2*i + 2, :]]), axis = 0) 

        channels.append(I)     

    return np.stack(channels, axis = 2)

expanded_img = expand(I)
plt.imshow(expanded_img)
plt.show()

    


