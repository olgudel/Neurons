import numpy as np

###############################################################################
###############################################################################
#
#                           Function Definitions
#
###############################################################################
###############################################################################

def main_program():

    #Input for the program
    string_input = input()

    initial_state = string_input[:-2] #String for the algorithm
    algorithm_char = string_input[-1] #Character that decides the program
    
    goal_state = '1w2w3w4w' #The desired goal state

    #Run the algorithm with the above three variables.
    goal_node = run_algorithm(initial_state, goal_state, algorithm_char)

    display_output(goal_node, string_input, algorithm_char)

            
def run_algorithm(initial_state, goal_state,  algorithm_char):
    if algorithm_char == 'a':
        result = run_a_star_algorithm(initial_state, goal_state, algorithm_char)
    if algorithm_char == 'b':
        result = run_BFS_algorithm(initial_state, goal_state, algorithm_char)
    return result

def run_a_star_algorithm(initial_state, goal_state, algorithm_char):
    
    initial_node = Node(state = initial_state, parent = None,
                        action = None, cost = 0)
    initial_node.path_cost = 0
   
    if initial_node.state == goal_state:
        return initial_node
    
    frontier = SortedPriorityQueue()
    frontier.add(initial_node, 0)
    
    reached = {initial_node.state : initial_node}
   
    while not frontier.is_empty():
        node = get_best_node(frontier)
        if node.state == goal_state: 
            return node
        for child_node in expand(node, algorithm_char):
            child_state = child_node.state
            if (child_state not in reached) or \
               (child_node.path_cost < reached[child_state].path_cost):
                reached[child_state] = child_node
                frontier.add(child_node, f_eval_a_star(child_node,
                                                       heuristic, goal_state))
    print('NO NODE FOUND')

def get_best_node(frontier):
    
    #Get all nodes with the same f value and choose the one
    #using the tie procedure defined in the homework
    
    if len(frontier) == 1:
        return frontier.remove_min()[0]
    min_val = frontier.min()[1]
    node_list = [frontier.remove_min()[0]]

    for i in range(len(frontier)):
        if len(frontier) == 0:
            break
        if (frontier.min()[1] == min_val):
            next_node, node_val = frontier.remove_min()
            node_list.append(next_node)
        else:
            break
 
    best_node, other_nodes = tie_break(node_list)

    if len(other_nodes) != 0:
        for node in other_nodes:
            frontier.add(node, min_val)
            
    return best_node

def tie_break(node_list):
    node_values = []
    for node in node_list:
        node_state = node.state
        node_string = []
        for i in range(len(node_state)):
            if node_state[i]  == 'b':
                node_string.append('0')
            if node_state[i] == 'w':
                node_string.append('1')
            if node_state[i] not in ['w', 'b']:
                node_string.append(node_state[i])
        node_string = ''.join(node_string)
        node_value = int(node_string)
        node_values.append(node_value)
        

    best_index = np.argmax(node_values)
    best_node = node_list[best_index]
    other_nodes = [node_list[i] for i in range(len(node_list)) \
                   if i != best_index]
    return best_node, other_nodes

def run_BFS_algorithm(initial_state, goal_state, algorithm_char):
       
    initial_node = Node(state = initial_state, parent = None,
                        action = None, cost = None)
   
    if initial_node.state == goal_state:
        return initial_node
    frontier = LinkedQueue()
    frontier.enqueue(initial_node)
        
    reached = set([initial_node.state])
    while not frontier.is_empty():
        node = frontier.dequeue()
        for child_node, flip_position in expand(node, algorithm_char):
            child_state = child_node.state
            if child_state == goal_state:
                return child_node
            if child_state not in reached:
                reached.add(child_state)
                frontier.enqueue(child_node)
    return reached



def expand(node, algorithm_char):
    
    if algorithm_char == 'b':
        
        state = node.state
        flip_positions = [1,2,3,4]
        flips = [Node(flip_string(state, flip_position), parent = node,
                      action = None, cost = None, location = flip_position) for flip_position in flip_positions]
        return zip(flips, flip_positions)
    
    if algorithm_char == 'a':
        
        state = node.state
        flip_positions = [1,2,3,4]
        flips = [Node(flip_string(state, flip_position), parent = node,
                      action = None, cost = flip_position,
                      location = flip_position)\
                 for flip_position in flip_positions]
        for node in flips:
            node.get_path_cost()
        return flips


def f_eval_a_star(child_node, heuristic, goal_state):
    return child_node.path_cost + heuristic(child_node.state)

def heuristic(string):
    order = list(map(int, list(string[::2])))
    heuristic_cost = 0
    for i in range(4):
        if order[i] != i+1:
            heuristic_cost = max(heuristic_cost, order[i])
    return heuristic_cost
    

def insert_line_into_string(string, position):
    return ''.join((string[:2*position], '|', string[2*position:]))


def flip_string(string, flip_position):
    

  

    indices = ''.join((string[i] for i in range(0,8,2)))
    p_types = ''.join((string[i] for i in range(1,9,2)))

    
    indices_flipped = ''.join((indices[:flip_position][::-1],
                               indices[flip_position:]))
    p_types_flipped = ''.join((switch_type(p_types[:flip_position][::-1]),
                               p_types[flip_position:]))

    new_string = []
    for i in range(len(indices_flipped)):
        new_string.append(indices_flipped[i])
        new_string.append(p_types_flipped[i])

    new_string = ''.join(new_string)

    return new_string

def switch_type(p_type_string):
    new_string = []
    for i in range(len(p_type_string)):
        if p_type_string[i] == 'b':
            new_string.append('w')
        if p_type_string[i] == 'w':
            new_string.append('b')
    new_string = ''.join(new_string)
    return new_string
    
def display_output(node, string_input, algorithm_char):

    if algorithm_char == 'b':


        state_list = []
        split_list = []
        
        while node.parent != None:
            state_list.append(node.state)
            split_list.append(node.location)
            node = node.parent
            
            
        state_list.append(string_input[:-2])

        state_list.reverse()
        split_list.reverse()

        for i in range(len(split_list)):
            print_string = insert_line_into_string(state_list[i], split_list[i])
            print(print_string)
        print(state_list[-1])

    if algorithm_char == 'a':


        state_list = []
        split_list = []
        path_cost_list = []
        heuristic_list = []
        
        while node.parent != None:
            state_list.append(node.state)
            split_list.append(node.location)
            path_cost_list.append(node.path_cost)
            heuristic_list.append(heuristic(node.state))
            node = node.parent
            
        state_list.append(string_input[:-2])
        path_cost_list.append(0)
        heuristic_list.append(0)

        state_list.reverse()
        split_list.reverse()
        path_cost_list.reverse()
        heuristic_list.reverse()

        for i in range(len(split_list)):
            print_string = insert_line_into_string(state_list[i], split_list[i])
            print(print_string, 'g:', path_cost_list[i], ', h:', heuristic_list[i])
        print(state_list[-1], 'g:', path_cost_list[-1], ', h:', heuristic_list[-1])


################################################################################
################################################################################
#
#                           Define classes
#
################################################################################
################################################################################

class LinkedQueue:
    
    class _Node:
        
        __slots__ = '_element', '_next'
        
        def __init__(self, _element, _next):
            self._element = _element
            self._next = _next

    def __init__(self):
        self._head = None
        self._tail = None
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return self._size == 0

    def first(self):
        if self.is_empty():
            return Exception('Queue is empty.')
        return self._head._element

    def dequeue(self):
        if self.is_empty():
            return Exception('Queue is empty.')
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        if self.is_empty():
            self._tail = None
        return answer

    def enqueue(self, e):
        newest = self._Node(e, None)
        if self.is_empty():
            self._head = newest
        else:
            self._tail._next = newest
        self._tail = newest
        self._size += 1

class Node:
    def __init__(self, state, parent, action, cost, location = None):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = cost
        self.location = location
        self.path_cost = 0
        
    def __lt__(self, other):
        return self.path_cost < other.path_cost

    def get_path_cost(self):
        path_cost = 0
        node = self   
        while True:
            path_cost += node.cost
            node = node.parent
            if node.parent == None:
                path_cost += node.cost
                self.path_cost = path_cost
                break

class PriorityQueueBase:
    class _Item:
        __slots__ = '_key', '_value'
        def __init__(self, k, v):
            self._key = k
            self._value = v
        def __lt__(self, other):
            return self._key < other._key #Compare items based on keys
    def is_empty(self):
            return len(self) == 0

class SortedPriorityQueue(PriorityQueueBase):
    def __init__(self):
        self._data = PositionalList()
    def __len__(self):
        return len(self._data)
    def add(self, key, value):
        newest = self._Item(key, value)
        walk = self._data.last()
        #This works because even if there's an error for nontype for
        #walk.element the and works on the left side first and ignores
        #whatever's on the other side of it if it's false.
        while walk is not None and newest < walk.element():
            walk = self._data.before(walk)
        if walk is None:
            self._data.add_first(newest)
        else:
            self._data.add_after(walk, newest)
    def min(self):
        if self.is_empty():
            raise Exception('Priority queue is empty')
        p = self._data.first()
        item = p.element()
        return (item._key, item._value)
    def remove_min(self):
        if self.is_empty():
            raise Exception('Priority queue is empty')
        item = self._data.delete(self._data.first())
        return (item._key, item._value)


class _DoublyLinkedBase:
    
    class _Node:
        __slots__ = '_element', '_prev', '_next'

        def __init__(self, _element, _prev, _next):
            self._element = _element
            self._prev = _prev
            self._next = _next

    def __init__(self):
        self._header = self._Node(None, None, None)
        self._trailer = self._Node(None, None, None)
        self._header._next = self._trailer
        self._trailer._prev = self._header
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return self._size == 0

    def _insert_between(self, e, predecessor, successor):
        newest = self._Node(e, predecessor, successor)
        predecessor._next = newest
        successor._prev = newest
        self._size += 1
        return newest

    def _delete_node(self, node):
        predecessor = node._prev
        successor = node._next
        predecessor._next = successor
        successor._prev = predecessor
        self._size -= 1
        element = node._element
        node._prev = node._next = node._element = None #Depreciate node
        return element

class PositionalList(_DoublyLinkedBase):

    class Position:

        def __init__(self, container, node):
            self._container = container
            self._node = node

        def element(self):
            return self._node._element

        def __eq__(self, other):
            return type(other) is type(self) and other._node is self._node

        def __ne__(self, other):
            return not(self == other)

    def _validate(self, p):
        if not isinstance(p, self.Position):
            raise TypeError( 'p must be proper Position type' )
        if p._container is not self:
            raise ValueError( 'p does not belong to this container' )
        if p._node._next is None: # convention for deprecated nodes
            raise ValueError( 'p is no longer valid' )
        return p._node

    def _make_position(self, node):
        if node is self._header or node is self._trailer:
            return None
        else:
            return self.Position(self, node)

    def first(self):
        return self._make_position(self._header._next)

    def last(self):
        return self._make_position(self._trailer._prev)

    def before(self, p):
        node = self._validate(p)
        return self._make_position(node._prev)

    def after(self, p):
        node = self._validate(p)
        return self._make_position(node._next)

    def __iter__(self):
        cursor = self.first()
        while cursor is not None:
            yield cursor.element()
            cursor = self.after(cursor)

    def _insert_between(self, e, predecessor, successor):
        node = super()._insert_between(e, predecessor, successor)
        return self._make_position(node)

    def add_first(self, e):
        return self._insert_between(e, self._header, self._header._next)

    def add_last(self, e):
        return self._insert_between(e, self._trailer._prev, self._trailer)

    def add_before(self, p, e):
        original = self._validate(p)
        return self._insert_between(e, original._prev, original)

    def add_after(self, p, e):
        original = self._validate(p)
        return self._insert_between(e, original, original._next)

    def delete(self, p):
        original = self._validate(p)
        return self._delete_node(original)

    def replace(self, p, e):
        original = self._validate(p)
        old_value = original._element
        original._element = e
        return old_value
        

################################################################################
################################################################################
#
#                               Main Code
#
################################################################################
################################################################################


main_program()


    
